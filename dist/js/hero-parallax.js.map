{
  "version": 3,
  "sources": ["../../js/hero-parallax.js"],
  "sourcesContent": ["/**\n * Hero Parallax for SideRun landing page\n * - Uses requestAnimationFrame for smooth updates\n * - Passive scroll/resize listeners\n * - Honors prefers-reduced-motion\n * - Isolated and non-intrusive: only affects .hero-parallax layers\n */\n(function () {\n  // Guard: respect reduced motion preferences\n  const reduceMotion = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  if (reduceMotion) return;\n\n  let ticking = false;\n  let viewportH = window.innerHeight || 0;\n\n  /**\n   * Cache parallax layers with depth factors\n   */\n  const root = document.querySelector('.hero');\n  if (!root) return; // no hero on page\n\n  const layers = Array.from(root.querySelectorAll('.hero-parallax__layer')).map((el) => {\n    const depth = parseFloat(el.getAttribute('data-depth') || '0.1');\n    return { el, depth };\n  });\n\n  if (!layers.length) return;\n\n  /**\n   * Compute a transform based on scroll position.\n   * We translate layers vertically by (scrollProgress * depth * factor).\n   */\n  function update() {\n    ticking = false;\n\n    const rect = root.getBoundingClientRect();\n    // progress: 0 when hero top at viewport top, increases as you scroll down\n    const progress = Math.min(1.25, Math.max(0, (0 - rect.top) / (viewportH || 1)));\n  const base = 50; // subtler translation to match minimal reference style\n\n    for (const { el, depth } of layers) {\n      const translateY = progress * depth * base;\n      el.style.transform = `translate3d(0, ${translateY}px, 0)`;\n    }\n  }\n\n  function onScroll() {\n    if (!ticking) {\n      ticking = true;\n      requestAnimationFrame(update);\n    }\n  }\n\n  function onResize() {\n    viewportH = window.innerHeight || viewportH;\n    onScroll();\n  }\n\n  // Initialize and bind events with passive listeners\n  window.addEventListener('scroll', onScroll, { passive: true });\n  window.addEventListener('resize', onResize, { passive: true });\n\n  // Initial paint after DOM ready\n  if (document.readyState === 'complete' || document.readyState === 'interactive') {\n    onResize();\n  } else {\n    document.addEventListener('DOMContentLoaded', onResize, { once: true });\n  }\n})();\n"],
  "mappings": "OAOC,UAAY,CAGX,GADqB,OAAO,YAAc,OAAO,WAAW,kCAAkC,EAAE,QAC9E,OAElB,IAAIA,EAAU,GACVC,EAAY,OAAO,aAAe,EAKhCC,EAAO,SAAS,cAAc,OAAO,EAC3C,GAAI,CAACA,EAAM,OAEX,IAAMC,EAAS,MAAM,KAAKD,EAAK,iBAAiB,uBAAuB,CAAC,EAAE,IAAKE,GAAO,CACpF,IAAMC,EAAQ,WAAWD,EAAG,aAAa,YAAY,GAAK,KAAK,EAC/D,MAAO,CAAE,GAAAA,EAAI,MAAAC,CAAM,CACrB,CAAC,EAED,GAAI,CAACF,EAAO,OAAQ,OAMpB,SAASG,GAAS,CAChBN,EAAU,GAEV,IAAMO,EAAOL,EAAK,sBAAsB,EAElCM,EAAW,KAAK,IAAI,KAAM,KAAK,IAAI,GAAI,EAAID,EAAK,MAAQN,GAAa,EAAE,CAAC,EAC1EQ,EAAO,GAEX,OAAW,CAAE,GAAAL,EAAI,MAAAC,CAAM,IAAKF,EAAQ,CAClC,IAAMO,EAAaF,EAAWH,EAAQI,EACtCL,EAAG,MAAM,UAAY,kBAAkBM,CAAU,QACnD,CACF,CAEA,SAASC,GAAW,CACbX,IACHA,EAAU,GACV,sBAAsBM,CAAM,EAEhC,CAEA,SAASM,GAAW,CAClBX,EAAY,OAAO,aAAeA,EAClCU,EAAS,CACX,CAGA,OAAO,iBAAiB,SAAUA,EAAU,CAAE,QAAS,EAAK,CAAC,EAC7D,OAAO,iBAAiB,SAAUC,EAAU,CAAE,QAAS,EAAK,CAAC,EAGzD,SAAS,aAAe,YAAc,SAAS,aAAe,cAChEA,EAAS,EAET,SAAS,iBAAiB,mBAAoBA,EAAU,CAAE,KAAM,EAAK,CAAC,CAE1E,GAAG",
  "names": ["ticking", "viewportH", "root", "layers", "el", "depth", "update", "rect", "progress", "base", "translateY", "onScroll", "onResize"]
}
