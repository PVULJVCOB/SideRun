{
  "version": 3,
  "sources": ["../../js/navbar.js"],
  "sourcesContent": ["/**\n * SideRun navigation: desktop expansion + SideRun init\n * - Mobile nav is handled by js/mobile-nav.js (React UMD). This file keeps desktop logic lean.\n */\n(function () {\n  'use strict';\n\n  // Removed scrollbar-compensation logic: scrollbars are hidden via CSS and navbar is flush right\n\n  // Desktop nav expand/collapse and SideRun init\n  function initDesktopNav() {\n    const desktopNav = document.querySelector('.site-nav.siderun');\n    if (!desktopNav) return;\n    const navLinks = desktopNav.querySelector('.site-nav__links.siderun');\n    const measureLinksWidth = () => {\n      if (!navLinks) return;\n      const w = Math.ceil(navLinks.scrollWidth + 1);\n      desktopNav.style.setProperty('--nav-links-max', `${w}px`);\n    };\n    let collapseTimer = null;\n    const expand = () => {\n      if (collapseTimer) { clearTimeout(collapseTimer); collapseTimer = null; }\n      measureLinksWidth();\n      desktopNav.classList.add('is-expanded');\n    };\n    const scheduleCollapse = () => {\n      if (collapseTimer) clearTimeout(collapseTimer);\n      collapseTimer = setTimeout(() => {\n        desktopNav.classList.remove('is-expanded');\n        collapseTimer = null;\n      }, 1000);\n    };\n    desktopNav.addEventListener('mouseenter', expand);\n    desktopNav.addEventListener('mouseleave', scheduleCollapse);\n    desktopNav.addEventListener('focusin', expand);\n    desktopNav.addEventListener('focusout', scheduleCollapse);\n    measureLinksWidth();\n    window.addEventListener('resize', measureLinksWidth);\n\n    // Init SideRun for nav (logo/demo inits live in index.html to avoid double init)\n    if (window.SideRun?.init) {\n      try { window.SideRun.init(desktopNav, { margin: 11, trackPointer: true, ease: 0.08 }); } catch {}\n    }\n  }\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initDesktopNav, { once: true });\n  } else {\n    initDesktopNav();\n  }\n})();\n// Toggle button behaviour for <=1200px: supports touch and keyboard\n(function () {\n  'use strict';\n  const TOGGLE_BREAKPOINT = 1200;\n  const toggle = document.querySelector('.site-nav-toggle');\n  const nav = document.querySelector('.site-nav.siderun');\n  if (!toggle || !nav) return;\n\n  let outsideListener = null;\n  let hoverCloseTimer = null;\n\n  const setExpanded = (expanded) => {\n    toggle.setAttribute('aria-expanded', expanded ? 'true' : 'false');\n    if (expanded) nav.classList.add('is-shown-by-toggle'); else nav.classList.remove('is-shown-by-toggle');\n  };\n\n  const closeNav = () => {\n    setExpanded(false);\n    if (outsideListener) { document.removeEventListener('pointerdown', outsideListener); outsideListener = null; }\n    if (hoverCloseTimer) { clearTimeout(hoverCloseTimer); hoverCloseTimer = null; }\n  };\n\n  const openNav = () => {\n    setExpanded(true);\n    // close when clicking/tapping outside\n    outsideListener = (e) => {\n      if (!nav.contains(e.target) && !toggle.contains(e.target)) closeNav();\n    };\n    document.addEventListener('pointerdown', outsideListener);\n  };\n\n  // pointer hover: when pointer enters the toggle, hide the toggle and show nav (desktop hover behavior)\n  const onTogglePointerEnter = (e) => {\n    // only activate for pointer (not touch) and when within breakpoint\n    if (e.pointerType === 'mouse' || e.pointerType === 'pen') {\n      // cancel any pending close\n      if (hoverCloseTimer) { clearTimeout(hoverCloseTimer); hoverCloseTimer = null; }\n      toggle.classList.add('is-hidden-by-hover');\n      openNav();\n    }\n  };\n\n  const onNavPointerLeave = (e) => {\n    // when pointer leaves the nav entirely, restore toggle and close nav\n    // use relatedTarget to ensure we didn't move into the toggle\n    const rt = e.relatedTarget;\n    if (!nav.contains(rt) && !toggle.contains(rt)) {\n      // schedule a short delay before closing so brief pointer exits don't immediately hide the nav\n      if (hoverCloseTimer) clearTimeout(hoverCloseTimer);\n      hoverCloseTimer = setTimeout(() => {\n        toggle.classList.remove('is-hidden-by-hover');\n        closeNav();\n        hoverCloseTimer = null;\n      }, 180);\n    }\n  };\n\n  // if pointer re-enters the nav, cancel any scheduled close\n  const onNavPointerEnter = () => {\n    if (hoverCloseTimer) { clearTimeout(hoverCloseTimer); hoverCloseTimer = null; }\n  };\n\n  nav.addEventListener('pointerenter', onNavPointerEnter);\n\n  toggle.addEventListener('pointerenter', onTogglePointerEnter);\n  nav.addEventListener('pointerleave', onNavPointerLeave);\n\n  // toggle on click/pointerdown\n  toggle.addEventListener('click', (e) => {\n    e.preventDefault();\n    const expanded = toggle.getAttribute('aria-expanded') === 'true';\n    if (expanded) closeNav(); else openNav();\n  });\n\n  // keyboard: Space or Enter activates the button\n  toggle.addEventListener('keydown', (e) => {\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      toggle.click();\n    } else if (e.key === 'Escape') {\n      closeNav();\n      toggle.focus();\n    }\n  });\n\n  // close on Escape when nav has focus\n  nav.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape') { closeNav(); toggle.focus(); }\n  });\n\n  // ensure nav is hidden when resized above breakpoint\n  const onResize = () => {\n    if (window.innerWidth > TOGGLE_BREAKPOINT) { closeNav(); }\n  };\n  window.addEventListener('resize', onResize);\n})();\n"],
  "mappings": "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",
  "names": ["initDesktopNav", "desktopNav", "navLinks", "measureLinksWidth", "w", "collapseTimer", "expand", "scheduleCollapse", "toggle", "nav", "outsideListener", "hoverCloseTimer", "setExpanded", "expanded", "closeNav", "openNav", "e", "onTogglePointerEnter", "onNavPointerLeave", "rt", "onNavPointerEnter", "onResize"]
}
